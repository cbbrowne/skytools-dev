
= Skytools ToDo list =

In angular brackets after item is assumed complexity [easy, moderate, complex],
wheter it is good to have it in 3.0, and maybe also developer name
who already is handling it.

== Done for 3.0a2 ==

* make python modules parallel installable with skytools 2.x:
  - new pkgloader module, (ala pygtk but universal)
  - installed under `skytools-3.0` top dir
  - python modules import skytools via pkgloader:

      import pkgloader
      pkgloader.require('skytools', '3.0')
      import skytools

* newadm: rename to qadmin
* pgq
  - drop failed event concept
  - lazy fetch is now default
  - relaxed event processing for python modules - .tag_done() is not needed
  - get_{queue|consumer}_info() now report quick stats
  - ability to request big batches (10000 rows, 5 min), which combine several actual batches.
  - ability to stay behind on queue.
  - pgq.Consumer new config vars: pgq_batch_collect_events, pgq_batch_collect_interval, pgq_keep_lag
  - pgq triggers: magic fields to set event fields directly:
    `_pgq_ev_type, _pgq_ev_data, _pgq_ev_extra[1-4]`
* python/skytools:
  - config templates in docstr: `./script.py --ini` shows default conf
  - show connection name with error message
  - use config file name as default job name, `job_name` is thus optional now
  - new querybuilder class
  - .getdict() method for Config
* pgqd:
  - specifying fixed list of databases in config works
  - periodic detection works
* cascading
  - fix watermark publishing
  - several log message and level fixes
  - Replace 'switchover'/'failover' with 'takeover'
  - 'status' with dead nodes works
  - consumers last error is stored in db, showed by `londiste status`
* londiste
  - resync
  - missing
  - --all
  - globbing
  - compare/repair
  - apply sql one-by-one if last batch got error
  - support WHERE for COPY: londiste add --copy-condition=XX

* Simple Python consumer for pgq_coop, where each subconsumer
  is separate process.

* psycopgwrapper: make .server_version always available

== Required for 3.0-final ==

* make queue_loader extend londiste
* tests for coopconsumer
* qadmin: show stats about event counts based on seq values in ticks. [easy]
* londiste:
  - londiste doc update with new commands [easy]
  - fkeys, from 2.x [easy]
* londiste: check transactional UI

== Good to have changes ==

* dbscript: configurable error timeout (20s)
* automatic serial handling, --noserial switch?
* londiste:
  - execute --wait [moderate]

=== sql/pgq ===

* drop_queue(force) - to drop consumers [3.0, easy]

* pgq_node.is_root_event() rettype [easy, but hard to decide]

=== python/skytools ===

* Sleeping while waiting notices from db.  It seems good to speed up
  change-provider, switchover etc commands by using LISTEN/NOTIFY
  to wake up daemons. Adding notify to db functions is easy,
  sleeping part is bit harder.  [moderate]

* New DB API command `DBScript.exec_cmd()` needs better name. [3.0, hard to decide]

=== python/pgq ===

* Expose commands for node connstr change, pgq_node.drop_node(). [easy]

* Move all consumers to pgq.next_batch_info() [3.0, easy]

=== python/pgq/cascade ===

* Advanced admin commands.
  - node-status
  - set-status
  - on root switch/failover check if all tables are present
  [moderate]

=== python/londiste ===

* 'Q' event type for londiste, (queue_splitter event), for event
  that needs to be inserted into queue.  Also trigger flag to
  create such event.
  - better to be done as "redirect" - allow events for a table
    to be redirected to another table or queue.
  [moderate]

* --wait/--nowait switch for execute, to wait until script is applied
  to everywhere.
  [3.0, moderate]

* Decide if/how topology change or EXECUTE needs to take account
  tables in copy. [needs decision]
  - Proceed, let the admin check out details later.
  - Wait until COPY finishes.
  - Do not allow?

=== sql/londiste ===

* plpgsql trigger for TRUNCATE and Londiste support for installing such trigger [moderate]

== Doc improvements ==

* pgq_node and londiste have moved some user interaction messages
  into database, but their loglevels need review.
  This means executing various commands and seeing if output is sensible.
  [easy?]

* Python modules need docstring review. [easy?]

* dbscript: document self.args [east]

* replace "raise Exception" with "raise UsageError" , where we just
  want to inform user and so traceback is not needed. [easy]

* Document DB-API and psycopg2 details under psycopgwrapper. [hard?]

== Low-priority ==

=== Larger things ===

* skylog: publish sample logdb schema, with some tools. [moderate]
* londiste: support creating slave from master by pg_dump / PITR. [hard]
* pgq/cascade: rename node [hard]

=== Smaller things ===

* londiste: londiste status cmd [moderate]
 - check what modules are installed
 - check if replay is running (lag?)
 - check if copy is running (lag?)
 - count of tables done, count of unsynced
 - table in the middle of copy

* We need own async conn-to-conn copy loop in Python/PythonC.
  Currently we simply pipe one copy_to() to another copy_from()
  in blocked manner with large buffer,
  but that likely halves the potential throughput. [hard]
* skytools: switch (-q) for silence for cron/init scripts.
  Dunno if we can override loggers loaded from skylog.ini.
  Simply redirecting fds 0,1,2 to /dev/null should be enough then.
  [easy]
* Londiste: when buffering queries, check their size. [easy]
* automatic "repair" - after reaching sync point, the "replay"
  must be killed/paused, then fixes can be applied. [moderate]

== Just ideas ==

* skytools: config from database
* skytools: config-less operation?
* londiste: somehow automatic sync of table structure/functions/...?


== qadmin todo list ==

== Goal ==

Easy to use admin console to examine and administer PgQ queues.
Main feature is psql like tab-completion for everything (queue/consumer names).

== Current direction ==

* Cmdline switches similar to psql.
* No config file. (?)
* SQL-like syntax (potential to accept full SQL).
* Target is console usage, not scripts.
* Info about both plain and cascaded queues.
* Administer only plain queues.

== Potential future directions ==

 * SQL Scripts.
  - Full SQL
  - Variables?
  - Logic?
 * Admin scripts for cascaded queues.  Eg. implement current "switchover", "change-provider"
   commands with it.
  - Needs variables and multi-node support (execute on this node).
    Maybe look at the paralled exec features of psql.
 * Admin scripts for something else.
  - data maintainer?
  - release_script?

== Command line ==


  -Q:: queue name
  -U:: username
  -h:: host
  -p:: port
  -d:: database
 
  --help:: help
  --version:: version

== Internal language ==

All the commands assume they are connected to a database.

Raw connect, maybe set default queue:

  CONNECT dbname=.. host=.. port=.. user=.. password=.. queue=..;

Set default queue:

  CONNECT queue=..;

Connect to node on default queue:

  CONNECT node=..;

Plain queue modification:

  CREATE QUEUE <qname> [params?];
  REGISTER CONSUMER <cons>;
  UNREGISTER CONSUMER <cons>;
  DROP QUEUE <qname>;

  ALTER QUEUE <qname> SET ..;

Install code:

  INSTALL pgq;      -- txid, pgq, pgq_ext, pgq_node
  INSTALL londiste; -- all of above + londiste

Information:

  SHOW QUEUE (<qname> | *);
  SHOW CONSUMER (<cons> | *) [ ON <qname | * ];
  SHOW BATCH INFO (<id> | <consumer>) [ON <queue>?];
  SHOW BATCH EVENTS (<id> | <consumer>) [ON <queue>?];

== Smaller Open Questions ==

* What arguments should qadmin accept from command line?

  psql-style: qadmin [switches] [dbname [username]]
  ssh-style:  qadmin [switches] [command [args]]

* Command style and syntax.

* Multi-word vs. long words:
 - SHOW BATCH EVENTS <id>;
 - SHOW_BATCH_EVENTS <id>;

* Default queue vs. queue name in commands.

== ToDo ==

* General:
  - Lots of useful commands.

* Parsing:

  - Node naming is not consistent, as it has grown, not designed.
    Suggestions: (Word -> Ident, WList->TokenList?/NodeList?,
    DynList->DynIdent?, SWord->Param?) Also: get_next() -> parse()
  - Quoted idents/strings not supported.  Fix: nodes should unquote early.
    IIRC libpq connect string generation in "connect" code assumes already
    quoted values, quoting needs to be added there.
  - Tab-completion of uppercase keywords.
  - Disable lowercasing of quoted indents. (?)
  - Tab-completion of quoted idents. (?)
  - Multi-line commands. (?)

* Cascading: It would be useful to also have cascading commands available in qadmin.
   ( SWITCHOVER / CREATE NODE / PAUSE NODE / CHANGE PROVIDER ).
   But currently they are implemented using DBScript framework.  And
   we don't want to have several implementations of the commands.
   There seems to be 2 ways forward:
   - Convert qadmin to DBScript.  It is possible to make config-less DBScript.
   - Implement command under qadmin in non-DBScript way and make
     CascadeAdmin call qadmin implementation.

* Londiste: It seems to be good idea to make Londiste management also available in qadmin.
  - LONDISTE ADD|REMOVE TABLE <tbl>
  - LONDISTE ADD|REMOVE SEQUENCE <seq>
  - LONDISTE SHOW TABLES / SHOW LONDISTE TABLES / SHOW TABLES ?
  - SHOW MISSING TABLES?

* random other ideas:
  - queue rename.  (on remote side too?)
  - copy consumer pos
  - rename consumer
  - event del?

