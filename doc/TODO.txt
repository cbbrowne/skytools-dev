
= Skytools ToDo list =

In angular brackets after item is assumed complexity [easy, moderate, complex],
wheter it is good to have it in 3.0, and maybe also developer name
who already is handling it.

== Done for 3.0a2 ==

* newadm: rename to qadmin
* pgq
  - drop failed event concept
  - relaxed event processing for python modules
* python/skytools:
  - config templates in docstr
  - show connection name with error message
  - use config file name as default job name
  - new querybuilder class
  - .getdict() method for Config
* pgqd:
  - specifying fixed list of databases in config works
  - periodic detection works
* cascading
  - fix watermark publishing
  - several log message and level fixes
  - Replace 'switchover'/'failover' with 'takeover'
  - 'status' with dead nodes works
* londiste
  - resync
  - missing
  - --all
  - globbing
  - compare/repair

== Required for 3.0-final ==

* Simple Python consumer for pgq_coop, where each subconsumer
  is separate process. [easy]
* qadmin, pgqadm: show stats about event counts based on seq values in ticks. [easy]
* londiste, struct change needed:
  - londiste doc update with new commands [easy]
  - store last error [easy]
  - support WHERE for COPY [easy]
  - fkeys, from 2.x [easy]
  - execute --wait [moderate]

== Good to have changes ==

=== sql/pgq ===

* drop_queue(force) - to drop consumers [3.0, easy]

* pgq_node.is_root_event() rettype [easy, but hard to decide]

=== python/skytools ===

* Sleeping while waiting notices from db.  It seems good to speed up
  change-provider, switchover etc commands by using LISTEN/NOTIFY
  to wake up daemons. Adding notify to db functions is easy,
  sleeping part is bit harder.  [moderate]

* New DB API command `DBScript.exec_cmd()` needs better name. [3.0, hard to decide]

=== python/pgq ===

* Expose commands for node connstr change, pgq_node.drop_node(). [easy]

* Move all consumers to pgq.next_batch_info(), pgq.get_batch_cursor() [3.0, easy]

=== python/pgq/cascade ===

* Advanced admin commands.
  - node-status
  - set-status
  - on root switch/failover check if all tables are present
  [moderate]

=== python/londiste ===

* 'Q' event type for londiste, (queue_splitter event), for event
  that needs to be inserted into queue.  Also trigger flag to
  create such event.
  - better to be done as "redirect" - allow events for a table
    to be redirected to another table or queue.
  [moderate]

* --wait/--nowait switch for execute, to wait until script is applied
  to everywhere.
  [3.0, moderate]

* Decide if/how topology change or EXECUTE needs to take account
  tables in copy. [needs decision]
  - Proceed, let the admin check out details later.
  - Wait until COPY finishes.
  - Do not allow?

=== sql/londiste ===

* plpgsql trigger for TRUNCATE and Londiste support for installing such trigger [moderate]

== Doc improvements ==

* pgq_node and londiste have moved some user interaction messages
  into database, but their loglevels need review.
  This means executing various commands and seeing if output is sensible.
  [easy?]

* Python modules need docstring review. [easy?]

* dbscript: document self.args [east]

* replace "raise Exception" with "raise UsageError" , where we just
  want to inform user and so traceback is not needed. [easy]

* Document DB-API and psycopg2 details under psycopgwrapper. [hard?]

== Low-priority ==

=== Larger things ===

* skylog: publish sample logdb schema, with some tools. [moderate]
* londiste: support creating slave from master by pg_dump / PITR. [hard]
* pgq/cascade: rename node [hard]

=== Smaller things ===

* 'delay' param for consumer

* londiste: londiste status cmd [moderate]
 - check what modules are installed
 - check if replay is running (lag?)
 - check if copy is running (lag?)
 - count of tables done, count of unsynced
 - table in the middle of copy

* We need own async conn-to-conn copy loop in Python/PythonC.
  Currently we simply pipe one copy_to() to another copy_from()
  in blocked manner with large buffer,
  but that likely halves the potential throughput. [hard]
* skytools: switch (-q) for silence for cron/init scripts.
  Dunno if we can override loggers loaded from skylog.ini.
  Simply redirecting fds 0,1,2 to /dev/null should be enough then.
  [easy]
* Londiste: when buffering queries, check their size. [easy]
* automatic "repair" - after reaching sync point, the "replay"
  must be killed/paused, then fixes can be applied. [moderate]

== Just ideas ==

* skytools: config from database
* skytools: config-less operation?
* londiste: somehow automatic sync of table structure/functions/...?

